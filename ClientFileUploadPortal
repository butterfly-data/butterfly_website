<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Butterfly Data Consulting - Secure File Upload</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', Arial, sans-serif;
      background: linear-gradient(135deg, #0a1628 0%, #1a2942 100%);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
      color: #e8eef5;
    }

    .container {
      background: rgba(26, 41, 66, 0.95);
      border: 1px solid rgba(64, 224, 208, 0.2);
      border-radius: 16px;
      box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
      max-width: 650px;
      width: 100%;
      padding: 45px;
      animation: slideIn 0.6s ease-out;
    }

    @keyframes slideIn {
      from { opacity: 0; transform: translateY(-30px); }
      to { opacity: 1; transform: translateY(0); }
    }

    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }

    @keyframes shake {
      0%, 100% { transform: translateX(0); }
      25% { transform: translateX(-10px); }
      50% { transform: translateX(10px); }
      75% { transform: translateX(-10px); }
    }

    .logo-header {
      text-align: center;
      margin-bottom: 35px;
    }

    .logo-text {
      font-size: 24px;
      font-weight: 700;
      background: linear-gradient(135deg, #40e0d0, #48d1cc);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      margin-bottom: 8px;
    }

    .logo-icon {
      width: 50px;
      height: 50px;
      margin: 0 auto 15px;
      fill: #40e0d0;
    }

    h2 { 
      color: #ffffff; 
      text-align: center; 
      margin-bottom: 12px; 
      font-size: 28px;
      font-weight: 700;
    }

    .subtitle { 
      text-align: center; 
      color: #a0aec0; 
      margin-bottom: 30px; 
      font-size: 15px; 
    }

    .login-box, .upload-box, .confirm-box { display: none; }
    .login-box.active, .upload-box.active, .confirm-box.active { 
      display: block; 
      animation: fadeIn 0.4s ease-out;
    }

    .input-group { margin-bottom: 22px; }
    .input-group label { 
      display: block; 
      font-size: 14px; 
      font-weight: 600; 
      color: #a0aec0; 
      margin-bottom: 8px; 
    }
    .input-group input {
      width: 100%; 
      padding: 16px 20px; 
      border: 2px solid rgba(64, 224, 208, 0.3);
      border-radius: 10px; 
      font-size: 16px; 
      outline: none;
      transition: all 0.3s;
      background: rgba(26, 41, 66, 0.6);
      color: #ffffff;
    }
    .input-group input::placeholder {
      color: #718096;
    }
    .input-group input:focus { 
      border-color: #40e0d0; 
      box-shadow: 0 0 0 3px rgba(64, 224, 208, 0.15);
      background: rgba(26, 41, 66, 0.8);
    }

    .btn {
      width: 100%; 
      padding: 16px;
      background: linear-gradient(135deg, #40e0d0 0%, #48d1cc 100%);
      color: #0a1628; 
      border: none; 
      border-radius: 10px;
      font-size: 16px; 
      font-weight: 700; 
      cursor: pointer;
      transition: all 0.3s;
      margin-top: 12px;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
    .btn:hover:not(:disabled) { 
      transform: translateY(-2px); 
      box-shadow: 0 8px 20px rgba(64, 224, 208, 0.4);
      background: linear-gradient(135deg, #48d1cc 0%, #40e0d0 100%);
    }
    .btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      transform: none;
    }

    .btn-secondary {
      background: rgba(64, 224, 208, 0.1);
      color: #40e0d0;
      border: 2px solid rgba(64, 224, 208, 0.3);
    }
    .btn-secondary:hover:not(:disabled) { 
      background: rgba(64, 224, 208, 0.2); 
      box-shadow: none;
      border-color: #40e0d0;
    }

    .dropzone {
      border: 3px dashed rgba(64, 224, 208, 0.4);
      border-radius: 15px;
      padding: 50px 25px;
      text-align: center;
      cursor: pointer;
      background: rgba(26, 41, 66, 0.4);
      transition: all 0.3s;
      margin-top: 25px;
    }
    .dropzone:hover { 
      border-color: #40e0d0; 
      background: rgba(64, 224, 208, 0.05);
    }
    .dropzone.dragover { 
      border-color: #48d1cc; 
      background: rgba(64, 224, 208, 0.1); 
      transform: scale(1.02); 
    }
    .dropzone-icon { font-size: 48px; margin-bottom: 12px; }
    .dropzone-text { color: #e8eef5; font-size: 17px; margin-bottom: 6px; font-weight: 600; }
    .dropzone-subtext { color: #718096; font-size: 14px; }

    .file-list { margin-top: 25px; max-height: 320px; overflow-y: auto; }
    .file-list::-webkit-scrollbar { width: 8px; }
    .file-list::-webkit-scrollbar-track { background: rgba(26, 41, 66, 0.4); border-radius: 10px; }
    .file-list::-webkit-scrollbar-thumb { background: rgba(64, 224, 208, 0.3); border-radius: 10px; }
    .file-list::-webkit-scrollbar-thumb:hover { background: rgba(64, 224, 208, 0.5); }

    .file-item {
      background: rgba(26, 41, 66, 0.6);
      border: 1px solid rgba(64, 224, 208, 0.2);
      border-radius: 12px;
      padding: 16px;
      margin-bottom: 12px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      animation: slideIn 0.3s ease-out;
      transition: all 0.3s;
    }
    .file-item:hover {
      background: rgba(26, 41, 66, 0.8);
      border-color: rgba(64, 224, 208, 0.4);
    }
    .file-item.duplicate {
      background: rgba(239, 83, 80, 0.15);
      border: 2px solid #ef5350;
      animation: shake 0.5s;
    }
    .file-item.checking {
      opacity: 0.6;
    }

    .file-info { flex: 1; }
    .file-name { font-weight: 600; color: #ffffff; word-break: break-word; font-size: 15px; }
    .file-size { font-size: 13px; color: #a0aec0; margin-top: 5px; }
    .file-status {
      font-size: 12px;
      padding: 5px 12px;
      border-radius: 6px;
      margin-top: 8px;
      display: inline-block;
      font-weight: 600;
    }
    .file-status.error { 
      background: rgba(239, 83, 80, 0.2); 
      color: #ff6b6b;
      animation: shake 0.5s;
    }
    .file-status.checking { background: rgba(64, 224, 208, 0.15); color: #40e0d0; }
    .file-status.ready { background: rgba(72, 209, 204, 0.2); color: #48d1cc; }

    .remove-btn {
      background: #ef5350; 
      color: white; 
      border: none;
      border-radius: 50%; 
      width: 32px; 
      height: 32px; 
      font-size: 20px;
      cursor: pointer; 
      display: flex; 
      align-items: center; 
      justify-content: center;
      flex-shrink: 0;
      margin-left: 12px;
      transition: all 0.2s;
    }
    .remove-btn:hover { background: #e53935; transform: scale(1.1); }

    .success, .error, .warning {
      margin-top: 18px; 
      padding: 14px 18px; 
      border-radius: 10px; 
      font-size: 14px; 
      display: none;
    }
    .success { 
      background: rgba(72, 209, 204, 0.15); 
      border: 1px solid rgba(72, 209, 204, 0.4); 
      color: #48d1cc; 
    }
    .error { 
      background: rgba(239, 83, 80, 0.15); 
      border: 1px solid rgba(239, 83, 80, 0.4); 
      color: #ff6b6b; 
    }
    .warning { 
      background: rgba(255, 159, 64, 0.15); 
      border: 1px solid rgba(255, 159, 64, 0.4); 
      color: #ffa940; 
    }
    .success.show, .error.show, .warning.show { 
      display: block; 
      animation: fadeIn 0.4s; 
    }

    .alert-box {
      background: rgba(239, 83, 80, 0.1);
      border: 2px solid #ef5350;
      border-radius: 12px;
      padding: 20px;
      margin: 20px 0;
      display: none;
      animation: shake 0.5s;
    }
    .alert-box.show { display: block; }
    .alert-box-title {
      font-size: 18px;
      font-weight: 700;
      color: #ff6b6b;
      margin-bottom: 12px;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    .alert-box-message {
      color: #ff8a80;
      font-size: 14px;
      line-height: 1.6;
      margin-bottom: 15px;
    }
    .alert-box-files {
      background: rgba(26, 41, 66, 0.6);
      border-radius: 8px;
      padding: 12px;
      margin-top: 10px;
      max-height: 150px;
      overflow-y: auto;
    }
    .alert-box-file {
      padding: 8px;
      margin-bottom: 6px;
      background: rgba(239, 83, 80, 0.15);
      border-radius: 6px;
      font-size: 13px;
      color: #ff6b6b;
      font-weight: 600;
    }
    .alert-box-file:last-child { margin-bottom: 0; }

    .info-banner {
      background: rgba(72, 209, 204, 0.15);
      border-left: 4px solid #40e0d0;
      padding: 14px;
      border-radius: 8px;
      margin-bottom: 20px;
      font-size: 14px;
      color: #48d1cc;
      display: none;
    }
    .info-banner.show { display: block; }

    .confirm-item {
      background: rgba(26, 41, 66, 0.6);
      border: 1px solid rgba(64, 224, 208, 0.2);
      border-radius: 10px;
      padding: 14px 18px;
      margin-bottom: 12px;
      border-left: 5px solid #40e0d0;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .confirm-item-info { flex: 1; }
    .confirm-item-name { font-weight: 600; color: #ffffff; margin-bottom: 5px; }
    .confirm-item-size { font-size: 13px; color: #a0aec0; }
    .confirm-item-badge {
      font-size: 11px;
      padding: 5px 10px;
      border-radius: 5px;
      font-weight: 700;
      white-space: nowrap;
      margin-left: 12px;
      background: rgba(72, 209, 204, 0.2);
      color: #48d1cc;
    }

    .confirm-summary {
      text-align: center;
      font-weight: 600;
      margin-bottom: 22px;
      padding: 16px;
      background: rgba(72, 209, 204, 0.15);
      border-radius: 10px;
      color: #48d1cc;
      border: 1px solid rgba(72, 209, 204, 0.3);
    }

    .upload-progress {
      margin-top: 22px;
      padding: 18px;
      background: rgba(26, 41, 66, 0.6);
      border-radius: 12px;
      border: 1px solid rgba(64, 224, 208, 0.2);
      display: none;
    }
    .upload-progress.show { display: block; }

    .progress-item {
      margin-bottom: 14px;
      padding-bottom: 14px;
      border-bottom: 1px solid rgba(64, 224, 208, 0.1);
    }
    .progress-item:last-child { border-bottom: none; margin-bottom: 0; padding-bottom: 0; }

    .progress-info {
      display: flex;
      justify-content: space-between;
      margin-bottom: 8px;
      font-size: 14px;
    }
    .progress-name { color: #ffffff; font-weight: 600; }
    .progress-status { color: #40e0d0; font-size: 13px; }
    .progress-status.success { color: #48d1cc; }
    .progress-status.error { color: #ff6b6b; }

    .progress-bar {
      background: rgba(64, 224, 208, 0.1);
      height: 6px;
      border-radius: 10px;
      overflow: hidden;
    }
    .progress-fill {
      background: linear-gradient(90deg, #40e0d0 0%, #48d1cc 100%);
      height: 100%;
      width: 0;
      transition: width 0.3s;
      border-radius: 10px;
    }

    .btn-group {
      display: flex;
      gap: 12px;
      margin-top: 22px;
    }

    @media (max-width: 600px) {
      .container { padding: 35px 25px; }
      h2 { font-size: 24px; }
      .btn-group { flex-direction: column; gap: 8px; }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="logo-header">
      <img src="https://raw.githubusercontent.com/butterfly-data/butterfly_website/main/blue%20logo%20trans%20bg%20-%20Copy.png" alt="Butterfly Data Consulting" class="logo-icon">
      <div class="logo-text">Butterfly Data Consulting</div>
    </div>

    <!-- LOGIN BOX -->
    <div class="login-box active" id="loginBox">
      <h2>Client Portal</h2>
      <p class="subtitle">Secure file upload access</p>

      <div class="input-group">
        <label>Client Name</label>
        <input type="text" id="clientName" placeholder="Enter your client name" 
               onkeypress="if(event.key==='Enter') document.getElementById('password').focus()">
      </div>
      <div class="input-group">
        <label>Password</label>
        <input type="password" id="password" placeholder="Enter your password"
               onkeypress="if(event.key==='Enter') authenticate()">
      </div>

      <button class="btn" onclick="authenticate()" id="loginBtn">🔐 Login</button>
      <div class="error" id="loginError"></div>
    </div>

    <!-- UPLOAD BOX -->
    <div class="upload-box" id="uploadBox">
      <h2>Upload Files</h2>
      <p class="subtitle">Only new files will be accepted</p>

      <div class="alert-box" id="duplicateAlert">
        <div class="alert-box-title">
          <span>🚫</span>
          <span>Duplicate Files Detected</span>
        </div>
        <div class="alert-box-message">
          The following files already exist in the system. Please remove them or upload different files:
        </div>
        <div class="alert-box-files" id="duplicateFilesList"></div>
      </div>

      <div class="info-banner" id="successBanner">
        ✅ All files are new and ready to upload!
      </div>

      <div class="dropzone" id="dropzone">
        <div class="dropzone-icon">📁</div>
        <div class="dropzone-text">Drop files here or click to browse</div>
        <div class="dropzone-subtext">Multiple files supported</div>
      </div>

      <div class="file-list" id="fileList"></div>

      <button class="btn" id="proceedBtn" style="display:none;" onclick="proceedToConfirm()">
        Continue to Upload →
      </button>
      <button class="btn-secondary btn" onclick="logout()">← Logout</button>
      <div class="error" id="uploadError"></div>
    </div>

    <!-- CONFIRM BOX -->
    <div class="confirm-box" id="confirmBox">
      <h2>Confirm Upload</h2>
      <p class="subtitle">Review files before uploading</p>

      <div class="confirm-summary" id="confirmSummary"></div>
      <div class="confirm-list" id="confirmList"></div>

      <div class="upload-progress" id="uploadProgress"></div>

      <div class="btn-group">
        <button class="btn-secondary btn" onclick="backToUpload()" id="backBtn">← Back</button>
        <button class="btn" id="confirmBtn" onclick="confirmUpload()">✓ Upload Now</button>
      </div>

      <button class="btn-secondary btn" onclick="uploadMore()" id="uploadMoreBtn" style="display:none; margin-top: 15px;">
        📤 Upload More Files
      </button>

      <div class="success" id="success"></div>
      <div class="error" id="confirmError"></div>
    </div>
  </div>

  <script>
    let sasUrl = null;
    let selectedFiles = [];
    let isUploading = false;

    function resetMessages() {
      document.querySelectorAll('.success, .error, .warning, .info-banner, .alert-box').forEach(el => {
        el.classList.remove('show');
      });
    }

    async function authenticate() {
      const clientName = document.getElementById('clientName').value.trim();
      const password = document.getElementById('password').value.trim();
      const errorEl = document.getElementById('loginError');
      const btn = document.getElementById('loginBtn');
      resetMessages();

      if (!clientName || !password) {
        errorEl.textContent = "⚠️ Please enter both client name and password";
        errorEl.classList.add('show');
        return;
      }

      btn.disabled = true;
      btn.textContent = "🔄 Verifying...";

      try {
        const res = await fetch("http://localhost:7071/api/client-authentication", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ clientName, password })
        });

        if (!res.ok) {
          const errorData = await res.text();
          throw new Error(errorData || "Invalid credentials");
        }

        const data = await res.json();
        sasUrl = data.sasUrl;

        document.getElementById('loginBox').classList.remove('active');
        document.getElementById('uploadBox').classList.add('active');
      } catch (err) {
        errorEl.textContent = "❌ " + (err.message || "Authentication failed. Please try again.");
        errorEl.classList.add('show');
      } finally {
        btn.disabled = false;
        btn.textContent = "🔐 Login";
      }
    }

    function logout() {
      if (isUploading && !confirm("Upload in progress. Are you sure you want to logout?")) {
        return;
      }
      
      sasUrl = null;
      selectedFiles = [];
      isUploading = false;
      document.getElementById('clientName').value = '';
      document.getElementById('password').value = '';
      resetMessages();
      document.getElementById('uploadBox').classList.remove('active');
      document.getElementById('confirmBox').classList.remove('active');
      document.getElementById('loginBox').classList.add('active');
      updateFileList();
    }

    function uploadMore() {
      selectedFiles = [];
      resetMessages();
      document.getElementById('confirmBox').classList.remove('active');
      document.getElementById('uploadBox').classList.add('active');
      document.getElementById('uploadMoreBtn').style.display = 'none';
      updateFileList();
    }

    const dropzone = document.getElementById('dropzone');
    dropzone.addEventListener('dragover', e => { 
      e.preventDefault(); 
      dropzone.classList.add('dragover'); 
    });
    dropzone.addEventListener('dragleave', () => dropzone.classList.remove('dragover'));
    dropzone.addEventListener('drop', e => {
      e.preventDefault(); 
      dropzone.classList.remove('dragover');
      addFiles(Array.from(e.dataTransfer.files));
    });
    dropzone.addEventListener('click', () => {
      const input = document.createElement('input');
      input.type = 'file';
      input.multiple = true;
      input.onchange = e => addFiles(Array.from(e.target.files));
      input.click();
    });

    async function addFiles(files) {
      if (!sasUrl) return;

      const newFiles = files.filter(f => !selectedFiles.some(sf => sf.name === f.name));
      
      if (newFiles.length < files.length) {
        const errorEl = document.getElementById('uploadError');
        errorEl.textContent = `⚠️ ${files.length - newFiles.length} duplicate file(s) already selected`;
        errorEl.classList.add('show');
        setTimeout(() => errorEl.classList.remove('show'), 3000);
      }

      for (const file of newFiles) {
        const fileObj = { 
          file, 
          name: file.name, 
          exists: null,
          checking: true 
        };
        selectedFiles.push(fileObj);
      }

      updateFileList();

      const base = sasUrl.replace(/\?.*$/, '');
      const query = sasUrl.slice(sasUrl.indexOf("?"));

      for (const fileObj of selectedFiles.filter(f => f.checking)) {
        try {
          const head = await fetch(`${base}/${encodeURIComponent(fileObj.name)}${query}`, { 
            method: "HEAD" 
          });
          fileObj.exists = head.ok;
        } catch (err) {
          fileObj.exists = false;
        }
        fileObj.checking = false;
        updateFileList();
      }
    }

    function updateFileList() {
      const list = document.getElementById('fileList');
      const btn = document.getElementById('proceedBtn');
      const duplicateAlert = document.getElementById('duplicateAlert');
      const successBanner = document.getElementById('successBanner');
      const duplicateFilesList = document.getElementById('duplicateFilesList');
      
      if (selectedFiles.length === 0) { 
        list.innerHTML = ''; 
        btn.style.display = 'none'; 
        duplicateAlert.classList.remove('show');
        successBanner.classList.remove('show');
        return; 
      }

      const duplicates = selectedFiles.filter(f => f.exists === true);
      const newFiles = selectedFiles.filter(f => f.exists === false);
      const checking = selectedFiles.filter(f => f.checking);

      if (duplicates.length > 0) {
        duplicateAlert.classList.add('show');
        successBanner.classList.remove('show');
        duplicateFilesList.innerHTML = duplicates.map(f => 
          `<div class="alert-box-file">🚫 ${f.name}</div>`
        ).join('');
      } else if (checking.length === 0 && newFiles.length > 0) {
        duplicateAlert.classList.remove('show');
        successBanner.classList.add('show');
      } else {
        duplicateAlert.classList.remove('show');
        successBanner.classList.remove('show');
      }

      list.innerHTML = selectedFiles.map((f, i) => {
        let statusHtml = '';
        let itemClass = '';
        
        if (f.checking) {
          statusHtml = '<div class="file-status checking">⏳ Checking...</div>';
          itemClass = 'checking';
        } else if (f.exists) {
          statusHtml = '<div class="file-status error">🚫 File already exists!</div>';
          itemClass = 'duplicate';
        } else {
          statusHtml = '<div class="file-status ready">✅ Ready to upload</div>';
        }

        return `
        <div class="file-item ${itemClass}">
          <div class="file-info">
            <div class="file-name">${f.name}</div>
            <div class="file-size">${formatFileSize(f.file.size)}</div>
            ${statusHtml}
          </div>
          <button class="remove-btn" onclick="removeFile(${i})" title="Remove file">×</button>
        </div>`;
      }).join('');
      
      if (checking.length === 0 && duplicates.length === 0 && newFiles.length > 0) {
        btn.style.display = 'block';
        btn.disabled = false;
      } else if (checking.length > 0) {
        btn.style.display = 'block';
        btn.disabled = true;
        btn.textContent = '⏳ Checking files...';
      } else if (duplicates.length > 0) {
        btn.style.display = 'block';
        btn.disabled = true;
        btn.textContent = '🚫 Remove duplicates to continue';
      } else {
        btn.style.display = 'none';
      }

      if (btn.style.display === 'block' && !btn.disabled) {
        btn.textContent = 'Continue to Upload →';
      }
    }

    function removeFile(i) {
      selectedFiles.splice(i, 1);
      updateFileList();
    }

    function proceedToConfirm() {
      const newFiles = selectedFiles.filter(f => !f.exists);
      
      if (newFiles.length === 0) {
        const errorEl = document.getElementById('uploadError');
        errorEl.textContent = "❌ No valid files to upload. Please add new files.";
        errorEl.classList.add('show');
        return;
      }

      if (selectedFiles.some(f => f.checking)) {
        const errorEl = document.getElementById('uploadError');
        errorEl.textContent = "⏳ Please wait for file checking to complete";
        errorEl.classList.add('show');
        return;
      }

      resetMessages();

      const summaryEl = document.getElementById('confirmSummary');
      const listEl = document.getElementById('confirmList');

      summaryEl.textContent = `✅ Ready to upload ${newFiles.length} file${newFiles.length > 1 ? 's' : ''}`;

      listEl.innerHTML = newFiles.map(f => `
        <div class="confirm-item">
          <div class="confirm-item-info">
            <div class="confirm-item-name">📄 ${f.name}</div>
            <div class="confirm-item-size">${formatFileSize(f.file.size)}</div>
          </div>
          <span class="confirm-item-badge">NEW</span>
        </div>
      `).join('');

      document.getElementById('uploadBox').classList.remove('active');
      document.getElementById('confirmBox').classList.add('active');
    }

    function backToUpload() {
      if (isUploading) {
        if (!confirm("Upload in progress. Are you sure you want to go back?")) {
          return;
        }
      }
      resetMessages();
      document.getElementById('confirmBox').classList.remove('active');
      document.getElementById('uploadBox').classList.add('active');
    }

    async function confirmUpload() {
      const base = sasUrl.replace(/\?.*$/, '');
      const query = sasUrl.slice(sasUrl.indexOf("?"));
      
      for (const fileObj of selectedFiles) {
        try {
          const head = await fetch(`${base}/${encodeURIComponent(fileObj.name)}${query}`, { 
            method: "HEAD" 
          });
          fileObj.exists = head.ok;
        } catch (err) {
          fileObj.exists = false;
        }
      }

      const newFiles = selectedFiles.filter(f => !f.exists);
      const duplicates = selectedFiles.filter(f => f.exists);
      
      if (duplicates.length > 0) {
        const errorEl = document.getElementById('confirmError');
        errorEl.innerHTML = `
          <strong>🚫 Upload Blocked!</strong><br>
          ${duplicates.length} file${duplicates.length > 1 ? 's' : ''} already exist${duplicates.length === 1 ? 's' : ''}: 
          <strong>${duplicates.map(f => f.name).join(', ')}</strong><br>
          Please go back and remove duplicate files or choose different files.
        `;
        errorEl.classList.add('show');
        return;
      }

      if (newFiles.length === 0) {
        const errorEl = document.getElementById('confirmError');
        errorEl.textContent = "❌ No new files to upload";
        errorEl.classList.add('show');
        return;
      }

      isUploading = true;
      const confirmBtn = document.getElementById('confirmBtn');
      const backBtn = document.getElementById('backBtn');
      const progressEl = document.getElementById('uploadProgress');
      const successEl = document.getElementById('success');
      const errorEl = document.getElementById('confirmError');

      confirmBtn.disabled = true;
      backBtn.disabled = true;
      confirmBtn.textContent = "🔄 Uploading...";
      resetMessages();
      progressEl.classList.add('show');

      let uploaded = 0, failed = 0;

      progressEl.innerHTML = '';

      for (let i = 0; i < newFiles.length; i++) {
        const f = newFiles[i];
        const progressId = `progress-${i}`;
        
        progressEl.innerHTML += `
          <div class="progress-item" id="${progressId}">
            <div class="progress-info">
              <span class="progress-name">${f.name}</span>
              <span class="progress-status" id="${progressId}-status">Uploading...</span>
            </div>
            <div class="progress-bar">
              <div class="progress-fill" id="${progressId}-fill"></div>
            </div>
          </div>
        `;

        try {
          const checkHead = await fetch(`${base}/${encodeURIComponent(f.name)}${query}`, { 
            method: "HEAD" 
          });
          
          if (checkHead.ok) {
            const statusEl = document.getElementById(`${progressId}-status`);
            statusEl.textContent = '🚫 Already exists - Skipped';
            statusEl.classList.add('error');
            failed++;
            continue;
          }

          const res = await fetch(`${base}/${encodeURIComponent(f.name)}${query}`, {
            method: "PUT",
            headers: { 
              "x-ms-blob-type": "BlockBlob",
              "If-None-Match": "*"
            },
            body: f.file
          });

          const fillEl = document.getElementById(`${progressId}-fill`);
          const statusEl = document.getElementById(`${progressId}-status`);

          if (res.ok || res.status === 201) {
            fillEl.style.width = '100%';
            statusEl.textContent = '✅ Complete';
            statusEl.classList.add('success');
            uploaded++;
          } else if (res.status === 412) {
            statusEl.textContent = '🚫 Already exists';
            statusEl.classList.add('error');
            failed++;
          } else {
            throw new Error(res.statusText || 'Upload failed');
          }
        } catch (err) {
          const statusEl = document.getElementById(`${progressId}-status`);
          statusEl.textContent = '❌ Failed';
          statusEl.classList.add('error');
          failed++;
        }
      }

      isUploading = false;
      confirmBtn.disabled = false;
      backBtn.disabled = false;
      confirmBtn.textContent = "✓ Upload Now";

      if (uploaded > 0) {
        setTimeout(() => {
          progressEl.classList.remove('show');
          successEl.textContent = `🎉 Successfully uploaded ${uploaded} file${uploaded > 1 ? 's' : ''}!`;
          successEl.classList.add('show');
          document.getElementById('uploadMoreBtn').style.display = 'block';
        }, 800);
      } else {
        progressEl.classList.remove('show');
      }

      if (failed > 0) {
        errorEl.textContent = `❌ ${failed} file${failed > 1 ? 's' : ''} failed to upload. Please try again.`;
        errorEl.classList.add('show');
      }
    }

    function formatFileSize(bytes) {
      if (bytes === 0) return '0 Bytes';
      const k = 1024, sizes = ['Bytes', 'KB', 'MB', 'GB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];
    }
  </script>
</body>
</html>
